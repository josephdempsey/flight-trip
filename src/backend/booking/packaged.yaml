AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: 'Booking service

  '
Globals:
  Function:
    Timeout: 5
    Tracing: Active
    MemorySize: 512
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: booking
        POWERTOOLS_METRICS_NAMESPACE: ServerlessAirline
        LOG_LEVEL: INFO
Parameters:
  BookingTable:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Parameter Name for Booking Table
  FlightTable:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Parameter Name for Flight Table
  Stage:
    Type: String
    Description: Environment stage or git branch
  CollectPaymentFunction:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Parameter Name for Collect Payment Function ARN
  RefundPaymentFunction:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Parameter Name for Refund Payment Function ARN
  AppsyncApiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Parameter Name for AWS AppSync API ID
  LogRetentionInDays:
    Type: Number
    Default: 14
    Description: CloudWatch Logs retention period
  SharedLibsLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Project shared libraries Lambda Layer ARN
Resources:
  ConfirmBooking:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ServerlessAirline-ConfirmBooking-${Stage}
      Handler: confirm.lambda_handler
      CodeUri: s3://amplify-flighttrip-dev-152829-deployment/76036190783a8ed7b4ec214d1077c451
      Layers:
      - Ref: SharedLibsLayer
      Runtime: python3.7
      Environment:
        Variables:
          BOOKING_TABLE_NAME:
            Ref: BookingTable
          STAGE:
            Ref: Stage
      Policies:
      - Version: '2012-10-17'
        Statement:
          Action: dynamodb:UpdateItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BookingTable}
  CancelBooking:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ServerlessAirline-CancelBooking-${Stage}
      Handler: cancel.lambda_handler
      CodeUri: s3://amplify-flighttrip-dev-152829-deployment/2d31f1ec5f3e272cc7bca23bcf0abab0
      Layers:
      - Ref: SharedLibsLayer
      Runtime: python3.7
      Environment:
        Variables:
          BOOKING_TABLE_NAME:
            Ref: BookingTable
          STAGE:
            Ref: Stage
      Policies:
      - Version: '2012-10-17'
        Statement:
          Action: dynamodb:UpdateItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BookingTable}
  ReserveBooking:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ServerlessAirline-ReserveBooking-${Stage}
      Handler: reserve.lambda_handler
      CodeUri: s3://amplify-flighttrip-dev-152829-deployment/5e605f94ef048ab37e8aa85829448e12
      Layers:
      - Ref: SharedLibsLayer
      Runtime: python3.7
      Environment:
        Variables:
          BOOKING_TABLE_NAME:
            Ref: BookingTable
          STAGE:
            Ref: Stage
      Policies:
      - Version: '2012-10-17'
        Statement:
          Action: dynamodb:PutItem
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${BookingTable}
  BookingTopic:
    Type: AWS::SNS::Topic
  NotifyBooking:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ServerlessAirline-NotifyBooking-${Stage}
      Handler: notify.lambda_handler
      CodeUri: s3://amplify-flighttrip-dev-152829-deployment/1bc6da179bf39519af6a17c6f60e4f30
      Layers:
      - Ref: SharedLibsLayer
      Runtime: python3.7
      MemorySize: 256
      Environment:
        Variables:
          BOOKING_TOPIC:
            Ref: BookingTopic
          STAGE:
            Ref: Stage
      Policies:
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::Sub: ${BookingTopic.TopicName}
  ConfirmBookingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ConfirmBooking}
      RetentionInDays:
        Ref: LogRetentionInDays
  CancelBookingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CancelBooking}
      RetentionInDays:
        Ref: LogRetentionInDays
  ReserveBookingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ReserveBooking}
      RetentionInDays:
        Ref: LogRetentionInDays
  NotifyBookingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${NotifyBooking}
      RetentionInDays:
        Ref: LogRetentionInDays
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: states.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::Sub: ${ReserveBooking.Arn}
            - Fn::Sub: ${CancelBooking.Arn}
            - Fn::Sub: ${ConfirmBooking.Arn}
            - Fn::Sub: ${NotifyBooking.Arn}
            - Ref: CollectPaymentFunction
            - Ref: RefundPaymentFunction
      - PolicyName: FlightTableUpdate
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:UpdateItem
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${FlightTable}
      - PolicyName: Send2DLQ
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - sqs:SendMessage
            Resource:
            - Fn::Sub: ${BookingsDLQ.Arn}
  BookingsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
  ProcessBooking:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName:
        Fn::Sub: Airline-ProcessBooking-${Stage}
      DefinitionString:
        Fn::Sub: "{\n    \"StartAt\": \"Reserve Flight\",\n    \"States\": {\n   \
          \     \"Reserve Flight\": {\n            \"Type\": \"Task\",\n         \
          \   \"Resource\": \"arn:aws:states:::dynamodb:updateItem\",\n          \
          \  \"Parameters\": {\n                \"TableName.$\": \"$.flightTable\"\
          ,\n                \"Key\": {\n                    \"id\": {\n         \
          \               \"S.$\": \"$.outboundFlightId\"\n                    }\n\
          \                },\n                \"UpdateExpression\": \"SET seatCapacity\
          \ = seatCapacity - :dec\",\n                \"ExpressionAttributeValues\"\
          : {\n                    \":dec\": {\n                        \"N\": \"\
          1\"\n                    },\n                    \":noSeat\": {\n      \
          \                  \"N\": \"0\"\n                    }\n               \
          \ },\n                \"ConditionExpression\": \"seatCapacity > :noSeat\"\
          \n            },\n            \"TimeoutSeconds\": 5,\n            \"Retry\"\
          : [\n                {\n                    \"ErrorEquals\": [\n       \
          \                 \"ProvisionedThroughputExceededException\",\n        \
          \                \"RequestLimitExceeded\",\n                        \"ServiceUnavailable\"\
          ,\n                        \"ThrottlingException\"\n                   \
          \ ],\n                    \"IntervalSeconds\": 1,\n                    \"\
          BackoffRate\": 2,\n                    \"MaxAttempts\": 2\n            \
          \    },\n                {\n                    \"ErrorEquals\": [\n   \
          \                     \"ConditionalCheckFailedException\"\n            \
          \        ],\n                    \"IntervalSeconds\": 0,\n             \
          \       \"MaxAttempts\": 0\n                }\n            ],\n        \
          \    \"Catch\": [\n                {\n                    \"ErrorEquals\"\
          : [\n                        \"States.ALL\"\n                    ],\n  \
          \                  \"ResultPath\": \"$.flightError\",\n                \
          \    \"Next\": \"Notify Booking Failed\"\n                }\n          \
          \  ],\n            \"ResultPath\": null,\n            \"Next\": \"Reserve\
          \ Booking\"\n        },\n        \"Reserve Booking\": {\n            \"\
          Type\": \"Task\",\n            \"Resource\": \"${ReserveBooking.Arn}\",\n\
          \            \"TimeoutSeconds\": 5,\n            \"Retry\": [\n        \
          \        {\n                    \"ErrorEquals\": [\n                   \
          \     \"BookingReservationException\"\n                    ],\n        \
          \            \"IntervalSeconds\": 1,\n                    \"BackoffRate\"\
          : 2,\n                    \"MaxAttempts\": 2\n                }\n      \
          \      ],\n            \"Catch\": [\n                {\n               \
          \     \"ErrorEquals\": [\n                        \"States.ALL\"\n     \
          \               ],\n                    \"ResultPath\": \"$.bookingError\"\
          ,\n                    \"Next\": \"Cancel Booking\"\n                }\n\
          \            ],\n            \"ResultPath\": \"$.bookingId\",\n        \
          \    \"Next\": \"Collect Payment\"\n        },\n        \"Release Flight\
          \ Seat\": {\n            \"Type\": \"Task\",\n            \"Resource\":\
          \ \"arn:aws:states:::dynamodb:updateItem\",\n            \"Parameters\"\
          : {\n                \"TableName.$\": \"$.flightTable\",\n             \
          \   \"Key\": {\n                    \"id\": {\n                        \"\
          S.$\": \"$.outboundFlightId\"\n                    }\n                },\n\
          \                \"UpdateExpression\": \"SET seatCapacity = seatCapacity\
          \ +:inc\",\n                \"ExpressionAttributeValues\": {\n         \
          \           \":inc\": {\n                        \"N\": \"1\"\n        \
          \            }\n                }\n            },\n            \"TimeoutSeconds\"\
          : 5,\n            \"Retry\": [\n                {\n                    \"\
          ErrorEquals\": [\n                        \"ProvisionedThroughputExceededException\"\
          ,\n                        \"RequestLimitExceeded\",\n                 \
          \       \"ServiceUnavailable\",\n                        \"ThrottlingException\"\
          \n                    ],\n                    \"IntervalSeconds\": 1,\n\
          \                    \"BackoffRate\": 2,\n                    \"MaxAttempts\"\
          : 2\n                }\n            ],\n            \"Catch\": [\n     \
          \           {\n                    \"ErrorEquals\": [\n                \
          \        \"States.ALL\"\n                    ],\n                    \"\
          ResultPath\": \"$.flightError\",\n                    \"Next\": \"Notify\
          \ Booking Failed\"\n                }\n            ],\n            \"ResultPath\"\
          : null,\n            \"Next\": \"Notify Booking Failed\"\n        },\n \
          \       \"Collect Payment\": {\n            \"Type\": \"Task\",\n      \
          \      \"Resource\": \"${CollectPaymentFunction}\",\n            \"Catch\"\
          : [\n                {\n                    \"ErrorEquals\": [\n       \
          \                 \"States.ALL\"\n                    ],\n             \
          \       \"ResultPath\": \"$.paymentError\",\n                    \"Next\"\
          : \"Cancel Booking\"\n                }\n            ],\n            \"\
          ResultPath\": \"$.payment\",\n            \"Next\": \"Confirm Booking\"\n\
          \        },\n        \"Cancel Booking\": {\n            \"Type\": \"Task\"\
          ,\n            \"Resource\": \"${CancelBooking.Arn}\",\n            \"Retry\"\
          : [\n                {\n                    \"ErrorEquals\": [\n       \
          \                 \"BookingCancellationException\"\n                   \
          \ ],\n                    \"IntervalSeconds\": 1,\n                    \"\
          BackoffRate\": 2,\n                    \"MaxAttempts\": 2\n            \
          \    }\n            ],\n            \"Catch\": [\n                {\n  \
          \                  \"ErrorEquals\": [\n                        \"States.ALL\"\
          \n                    ],\n                    \"ResultPath\": \"$.bookingError\"\
          ,\n                    \"Next\": \"Release Flight Seat\"\n             \
          \   }\n            ],\n            \"ResultPath\": null,\n            \"\
          Next\": \"Release Flight Seat\"\n        },\n        \"Confirm Booking\"\
          : {\n            \"Type\": \"Task\",\n            \"Resource\": \"${ConfirmBooking.Arn}\"\
          ,\n            \"Retry\": [\n                {\n                    \"ErrorEquals\"\
          : [\n                        \"BookingConfirmationException\"\n        \
          \            ],\n                    \"IntervalSeconds\": 1,\n         \
          \           \"BackoffRate\": 2,\n                    \"MaxAttempts\": 2\n\
          \                }\n            ],\n            \"Catch\": [\n         \
          \       {\n                    \"ErrorEquals\": [\n                    \
          \    \"States.ALL\"\n                    ],\n                    \"ResultPath\"\
          : \"$.bookingError\",\n                    \"Next\": \"Refund Payment\"\n\
          \                }\n            ],\n            \"ResultPath\": \"$.bookingReference\"\
          ,\n            \"Next\": \"Notify Booking Confirmed\"\n        },\n    \
          \    \"Refund Payment\": {\n            \"Type\": \"Task\",\n          \
          \  \"Resource\": \"${RefundPaymentFunction}\",\n            \"Catch\": [\n\
          \                {\n                    \"ErrorEquals\": [\n           \
          \             \"States.ALL\"\n                    ],\n                 \
          \   \"ResultPath\": \"$.paymentError\",\n                    \"Next\": \"\
          Cancel Booking\"\n                }\n            ],\n            \"ResultPath\"\
          : null,\n            \"Next\": \"Cancel Booking\"\n        },\n        \"\
          Notify Booking Failed\": {\n            \"Type\": \"Task\",\n          \
          \  \"Resource\": \"${NotifyBooking.Arn}\",\n            \"Retry\": [\n \
          \               {\n                    \"ErrorEquals\": [\n            \
          \            \"BookingNotificationException\"\n                    ],\n\
          \                    \"IntervalSeconds\": 1,\n                    \"BackoffRate\"\
          : 2,\n                    \"MaxAttempts\": 2\n                }\n      \
          \      ],\n            \"Catch\": [\n                {\n               \
          \     \"ErrorEquals\": [\n                        \"States.ALL\"\n     \
          \               ],\n                    \"ResultPath\": \"$.notificationgError\"\
          ,\n                    \"Next\": \"Booking DLQ\"\n                }\n  \
          \          ],\n            \"ResultPath\": \"$.notificationId\",\n     \
          \       \"Next\": \"Booking DLQ\"\n        },\n        \"Notify Booking\
          \ Confirmed\": {\n            \"Type\": \"Task\",\n            \"Resource\"\
          : \"${NotifyBooking.Arn}\",\n            \"Retry\": [\n                {\n\
          \                    \"ErrorEquals\": [\n                        \"BookingNotificationException\"\
          \n                    ],\n                    \"IntervalSeconds\": 1,\n\
          \                    \"BackoffRate\": 2,\n                    \"MaxAttempts\"\
          : 2\n                }\n            ],\n            \"ResultPath\": \"$.notificationId\"\
          ,\n            \"Next\": \"Booking Confirmed\"\n        },\n        \"Booking\
          \ DLQ\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"\
          arn:aws:states:::sqs:sendMessage\",\n            \"Parameters\": {\n   \
          \             \"QueueUrl\": \"${BookingsDLQ}\",\n                \"MessageBody.$\"\
          : \"$\"\n            },\n            \"ResultPath\": \"$.deadLetterQueue\"\
          ,\n            \"Next\": \"Booking Failed\"\n        },\n        \"Booking\
          \ Failed\": {\n            \"Type\": \"Fail\"\n        },\n        \"Booking\
          \ Confirmed\": {\n            \"Type\": \"Pass\",\n            \"End\":\
          \ true\n        }\n    }\n}\n"
      RoleArn:
        Fn::Sub: ${StatesExecutionRole.Arn}
  ProcessBookingParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /${Stage}/service/booking/statemachine/processBooking
      Description: Step Functions State Machine ARN
      Type: String
      Value:
        Ref: ProcessBooking
  BookingTopicParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: /${Stage}/service/booking/messaging/bookingTopic
      Description: Booking SNS Topic ARN
      Type: String
      Value:
        Ref: BookingTopic
  AppsyncStepFunctionsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: appsync.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
              Ref: ProcessBooking
  AppsyncStepFunctionsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Ref: AppsyncApiId
      Name: ProcessBookingSFN
      Description: Step Functions State Machine for Booking
      Type: HTTP
      ServiceRoleArn:
        Fn::GetAtt:
        - AppsyncStepFunctionsIamRole
        - Arn
      HttpConfig:
        Endpoint:
          Fn::Sub: https://states.${AWS::Region}.amazonaws.com/
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion:
              Ref: AWS::Region
            SigningServiceName: states
  ProcessBookingMutationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Ref: AppsyncApiId
      TypeName: Mutation
      FieldName: processBooking
      DataSourceName:
        Fn::Sub: ${AppsyncStepFunctionsDataSource.Name}
      RequestMappingTemplate:
        Fn::Sub: "$util.qr($ctx.stash.put(\"outboundFlightId\", $ctx.args.input.bookingOutboundFlightId))\n\
          $util.qr($ctx.stash.put(\"paymentToken\", $ctx.args.input.paymentToken))\n\
          $util.qr($ctx.stash.put(\"customer\", $ctx.identity.sub))\n$util.qr($ctx.stash.put(\"\
          executionId\", $util.autoId()))\n$util.qr($ctx.stash.put(\"createdAt\",\
          \ $util.time.nowISO8601()))\n\n#set( $payload = {\n    \"outboundFlightId\"\
          : $ctx.stash.outboundFlightId,\n    \"customerId\": $context.identity.sub,\n\
          \    \"chargeId\": $ctx.stash.paymentToken,\n    \"bookingTable\": \"${BookingTable}\"\
          ,\n    \"flightTable\": \"${FlightTable}\",\n    \"name\": $ctx.stash.executionId,\n\
          \    \"createdAt\": $ctx.stash.createdAt\n})\n\n{\n    \"version\": \"2018-05-29\"\
          ,\n    \"method\": \"POST\",\n    \"resourcePath\": \"/\",\n    \"params\"\
          : {\n        \"headers\": {\n            \"content-type\": \"application/x-amz-json-1.0\"\
          ,\n            \"x-amz-target\":\"AWSStepFunctions.StartExecution\"\n  \
          \      },\n        \"body\": {\n            \"stateMachineArn\": \"${ProcessBooking}\"\
          ,\n            \"input\": \"$util.escapeJavaScript($util.toJson($payload))\"\
          ,\n            \"name\": $util.toJson($ctx.stash.executionId)\n        }\n\
          \    }\n}\n"
      ResponseMappingTemplate: "{\n    \"id\": \"$ctx.stash.executionId\",\n    \"\
        status\": \"PENDING\"\n}\n"
Outputs:
  ProcessBookingStateMachine:
    Value:
      Ref: ProcessBooking
    Description: The ARN of the Process Booking StateMachine
  BookingTopic:
    Value:
      Ref: BookingTopic
    Description: Booking SNS Topic ARN
